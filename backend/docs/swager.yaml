openapi: 3.0.0
info:
  version: 1.0.0
  title: Bookstore API
  description: A simple bookstore API
servers:
  - url: http://localhost:3000
paths:
  /api/users:
    get:
      description: Returns a list of users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of persons returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new User (register)
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Users has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/{_id}:
    get:
      description: Returns the user with the given ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User data returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User with the give ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: User query Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a User
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/categories: 
    get:
      description: Returns a list of categories
      tags:
        - Category
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of categories returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new category
      tags:
        - Category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/categories/{_id}:
    get:
      description: Returns a category with the given ID
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category data returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category with the give ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a Category
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a category
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Category has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Category based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - first_name
        - last_name
        - email
        - address
        - role
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        role:
          type: string
        address: 
          type: object
          items:
            $ref: '#/components/schemas/Address'
    Book:
      type: object
      required:
        - title
        - price
        - quantity
        - category
        - author
      properties:
        title:
          type: string
        price:
          type: number
        quantity:
          type: number
        category:
          type: string
        author: 
          type: object
    Category:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    Address:
      type: object
      required:
        - country
        - city
        - street
        - zip
        - building
      properties:
        country:
          type: string
        city:
          type: string
        street:
          type: string
        zip:
          type: number
        building:
          type: number
    Error:
      type: object
      required:
        - message
        - has_error
      properties:
        message:
          type: string
        has_error:
          type: boolean
